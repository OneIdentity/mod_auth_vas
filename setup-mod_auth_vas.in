#! /bin/sh
# (c) 2007 Quest Software, Inc. All rights reserved.
# $Id$
#
# This helper script is provided to simplify setting up mod_auth_vas
# on a basic web server. It creates the HTTP service for the computer
# (if not done), and changes ownerships on the resulting keytab.
#

KEYTAB=/etc/opt/quest/vas/HTTP.keytab
VASTOOL=/opt/quest/bin/vastool
KTUTIL=/opt/quest/bin/ktutil
LOGFILE=/tmp/mod_auth_vas-setup.log.$$
PACKAGE_VERSION='@PACKAGE_VERSION@'

echo1 () { echo -n "$*"; }
echo2 () { echo "$*\\c"; }
echo3 () { echo "$* +"; }

if test "x`echo1 y`z" = "xyz"; then
    echon() { echo1 "$*"; }
elif test "x`echo2 y`z" = "xyz"; then
    echon () { echo2 "$*"; }
else
    echon () { echo3 "$*"; }
fi

umask 077

#-- prints a label with dots after it, and no newline
label () {
    echon "  `echo $* ............................................... | cut -c -40`  "
}

#-- prints an error message and dies
die () {
    echo "  -> Failed: $1" >&2
    exit 1
}

#-- prompt user for information
#   usage: query prompt varname [default]
query () {
    eval $2=
    while eval "test ! -n \"\$$2\""; do
	if read xx?yy <$0 2>/dev/null; then
	    eval "read \"$2?$1${3+ [$3]}: \"" || die "(end of file)"
	else
	    eval "read -p \"$1${3+ [$3]}: \" $2" || die "(end of file)"
	fi
	eval : "\${$2:=\$3}"
    done
}

#-- prompt for a yes/no question
yesorno () {
    echo "";
    while :; do
	query "$1" YESORNO y
	case "$YESORNO" in
	    Y*|y*) echo; return 0;;
	    N*|n*) echo; return 1;;
	    *) echo "Please enter 'y' or 'n'" >&2;;
	esac
    done
}

#-- record and execute a shell command
logfile_written=false
recordcmd () {
    if ! $logfile_written; then
	rm -f $LOGFILE
	set -o noclobber
	exec 5>$LOGFILE 
	set +o noclobber
    	logfile_written=true
    fi
    (echo "# `date`";
    echo "$*";
    echo ) >&5
    "$@"
}

#-- get a TGT for some operations
kinit () {
    local USER="$USER"
    ccname=/tmp/.mav_setup_$$
    if test ! -s $ccname; then
	USER="${SUDO_USER:-${USER}}"
	if [ z"$USER" = z"root" ]; then USER=Administrator; fi
	echo
        echo "Please login with a sufficiently privileged domain account."
        query "Username" USER ${USER}
	KRB5CCNAME=FILE:$ccname; export KRB5CCNAME
	trap "rm -f $ccname" 0
	vastool kinit "$USER" || die "Unable to acquire admin credentials"
    fi
}

#-- show usage (does not exit)
usage () {
    cat <<-.
	Usage: $0 [-a apxs] [-c conf] [-h]
	    -a apxs
	          Use program 'apxs' to find the web server extension tool.
	          If not specified, a built-in search path is used.
	    -c conf
	          Use file 'conf' as the main Apache configuration file. If
	          not specified, the apxs extension tool is queried.
	    -h
	          Display this help text.
.
}

#-- parse args

cflag=
aflag=
opterr=false

while test $# -gt 0; do
    case "$1" in
	-c)  if test $# -lt 2; then 
		echo "Missing argument to $1"; opterr=true; shift
	     else
		cflag="$2"; shift; shift
	     fi;;
	-c*) cflag=`echo " $1" | sed -e 's/^ -c//'`; shift;;
	-a)  if test $# -lt 2; then 
		echo "Missing argument to $1"; opterr=true; shift
	     else
		aflag="$2"; shift; shift
	     fi;;
	-a*) aflag=`echo " $1" | sed -e 's/^ -a//'`; shift;;
	-h)  usage; exit 0;;
	--)  shift; break;;
	-?*) echo "Unknown option: $1"; opterr=true; shift;;
	*)   break;;
    esac
done
if test $# -gt 0; then
    # don't expect any further arguments
    opterr=true
fi
if $opterr; then
    usage
    exit 1
fi

#-- intro
cat <<-.

	This script checks your local configuration for properly using mod_auth_vas.
	It will prompt you to create a web service object in Active Directory
	if one is needed, and it will correct permissions on certain files.
	Commands executed will be recorded in $LOGFILE

.

#-- tests
label "checking privileges"
id -un
if test `id -u` -ne 0; then
    checkroot () { 
	echo ""
	echo "WARNING: This script may need superuser privileges to proceed"
	echo ""
    }
else
    checkroot () { : ; }
fi

# 
# We must handle the following cases:
# 1) apxs is found (regardless of -a flag)
#  1a) no -c flag given: ask apxs where the cf file is
#  1b) -c flag given: trust -c flag
# 2) apxs is not found
#  2a) no -c flag given: search for config file in likely spots
#  2b) -c flag given: trust -c flag
#

#-- look for apxs
apxs=
label "looking for Apache extension tool"
for x in ${aflag:-"@APXS@" apxs2 apxs /usr/sbin/apxs2 /usr/sbin/apxs}; do
    test -z "$x" && continue
    ap_target=`($x -q TARGET) 2>/dev/null` || continue
    if test -n "$ap_target"; then
	apxs="$x"
	break;
    fi
done
if test -n "$apxs"; then
    echo "$apxs"
else
    echo "not found"
    if test -n "$aflag"; then
	echo "$aflag: not found or didn't work"
	exit 1
    fi
fi

label "looking for Apache configuration file"
if test -n "$cflag"; then
    AP_CF="$cflag"
else
    if test -n "$apxs"; then
	sysconfdir=`$apxs -q SYSCONFDIR`
	target=`$apxs -q TARGET`
    else
	sysconfdir=
	target=
    fi

    #-- look for a likely configuration file
    AP_CF=
    for dir in $sysconfdir \
	/etc/apache2 /etc/apache /etc/httpd/conf /etc/apache2/conf \
	/etc/apache/conf /etc/www/conf /var/www/conf /opt/IBMIHS/conf
    do
	for t in $target apache2 httpd; do
	    if test -f $dir/$t.conf; then
		AP_CF="$dir/$t.conf"
		break
	    fi
	    test -n "$AP_CF" && break
	done
    done
fi

#-- scan the config file for a group name
if test -f "$AP_CF"; then
    echo "$AP_CF"
    #echo "found"
    label "looking for Apache daemon group"
    APACHE_GROUP=`(sed -ne 's/^Group //p' < "$AP_CF"|sed -e 1q) 2>/dev/null`
    if test ! -n "$APACHE_GROUP"; then
	#-- try harder 
	for path in `sed -ne 's/^Include //p' < "$AP_CF"` /dev/null; do
	    APACHE_GROUP=`(sed -ne 's/^Group //p' < "$path"|sed -e 1q) 2>/dev/null`
	    test -n "$APACHE_GROUP" && break
	done
    fi

    if test -n "$APACHE_GROUP"; then
	echo "$APACHE_GROUP"
    else
	echo "not found"
    fi
else
    APACHE_GROUP=
    if test -z "$cflag"; then
	echo "not found"
    else
	echo "$cflag: not found"
	exit 1
    fi
fi

#-- if the Apache group is still unknown, look at existing groups and guess
if test ! -n "$APACHE_GROUP"; then
    APACHE_GROUP_GUESS=nobody
    for u in apache httpd www nogroup; do
	if test x`eval echo "~$u"` != x"~$u"; then
	    APACHE_GROUP_GUESS=$u
	    break
	fi
    done
fi

# These flags indicate access control for the current user, not for apache
keytab_readable=no
keytab_readwrite=no

label "looking for HTTP/ keytab"
if test -f "$KEYTAB"; then
    echo "$KEYTAB"
    if test -r "$KEYTAB" || test `id -u` -eq 0; then
	keytab_readable=yes
	if test -w "$KEYTAB" || test `id -u` -eq 0; then
	    keytab_readwrite=yes
	fi
    fi
else
    echo "keytab not found"
    cat <<-.

	This step creates a service object in Active Directory so 
	that browsers can authenticate with this web server.
	You will need to know an account password that has
	sufficient privileges to create the new service object.
	Contact your systems administration staff if you do not.
.
    if yesorno "Create the HTTP/ service account?"; then
        
        echo "Please specify the container DN in which to create the service:"
        query "Service container DN" CONTAINER default
        test x"$CONTAINER" = x"default" && CONTAINER=

        checkroot
	kinit

        recordcmd $VASTOOL \
	    service create ${CONTAINER:+-c "$CONTAINER"} HTTP/ || \
	    die "Cannot create HTTP/ service key: contact your IT support"

	label "checking new service keytab"
	if test -f "$KEYTAB"; then 
	    echo "found"
	else
	    echo "still not found"
	    die "Cannot find $KEYTAB"
	fi
	echo ""
    else
	echo "(Not creating HTTP/ service account)"
    fi
fi

# KB899417
cat <<.

If you have clients using Internet Explorer, a known issue (KB899417)
can see them suddenly being unable to authenticate after only 30 minutes.
A workaround is to create SPN aliases with all the possible 'short-names' 
that the client could use to access this server (i.e http://short-name/).
SPN aliases can also be useful for servers with multiple DNS identities.
.

if test "$keytab_readable" = "no"; then
    echo >&2
    echo "Keytab is not readable. Skipping Service Principal Name (SPN) aliasing." >&2
    echo "Re-run $0 as root to do SPN aliasing." >&2
    echo >&2
else
    kinit
    spns=`$VASTOOL attrs -s HTTP/ servicePrincipalName | wc -l`
    primary=`$KTUTIL -k "$KEYTAB" list 2> /dev/null | awk 'NR==4 {print $3}'`

    while :; do
	    cat <<.

The HTTP/ service is currently known by these SPNs (service principal names):

.
	    $VASTOOL attrs -s HTTP/ servicePrincipalName | 
		awk '{print "\t" $2 }'
	    echo
	    query "Enter a new SPN alias, or 'none' to finish" SPN "none"
	    [ x"$SPN" = x"none" ] && break

	    case "$SPN" in
		-*)
		    newspns=
		    found=false
		    for spn in `$VASTOOL attrs -s HTTP/ servicePrincipalName | 
			awk '{print $2}'`; do
			if [ x"-$spn" = x"$SPN" ]; then found=true
			else newspns="$newspns $spn"; fi
		    done
		    if $found; then
			$VASTOOL setattrs -m -s HTTP/ servicePrincipalName \
			    $newspns 
			$VASTOOL ktutil -k /etc/opt/quest/vas/HTTP.keytab \
			    remove -p ${SPN#-}
		    else
			echo "'${SPN#-}' not found" >&2
		    fi
		    ;;
		*)
		    oldspns=`$VASTOOL attrs -s HTTP/ servicePrincipalName | 
			awk '{print $2}'`
		    $VASTOOL setattrs -m -s HTTP/ servicePrincipalName \
			$oldspns $SPN &&\
		    $VASTOOL ktutil -k /etc/opt/quest/vas/HTTP.keytab \
			alias $primary $SPN
		    ;;
	    esac
    done
fi

# Keytab only has to exist for permission checks
if test -f "$KEYTAB"; then
  if test ! -n "$APACHE_GROUP"; then
    echo ""
    echo "The Apache server process must be able to access the keytab."
    echo "I didn't find a httpd.conf file so I don't know what creds it uses."
    echo "Tell me what unix group it will run as, and I'll check the"
    echo "keytab file permissions so that it is readable by Apache."
    echo ""
    query "Group for Apache httpd process" APACHE_GROUP $APACHE_GROUP_GUESS
    echo ""
  fi

  label "checking keytab is readable by $APACHE_GROUP"
  set -- `/bin/ls -l "$KEYTAB"`
  case "$1:$4" in
    -??????r??:*) echo "yes" ;;
    -???r?????:$APACHE_GROUP) echo "yes" ;;
    *) echo "no"
       if yesorno "Change group of $KEYTAB to $APACHE_GROUP?"; then
           label " -> fixing file mode and ownership"
           checkroot
           recordcmd chgrp "$APACHE_GROUP" "$KEYTAB" || 
	       die "Could not change file group"
           recordcmd chmod 640 "$KEYTAB" || 
	   	die "Could not change file mode"
           echo "fixed"
       else
	   echo "(Not changing ownership)"
       fi 
       ;;
  esac
fi

if test "$keytab_readable" = "no"; then
  echo >&2
  echo "Skipping keytab validity check (keytab is unreadable)." >&2
  echo >&2
else # Keytab is readable
  label "checking keytab can authenticate"
  tmpcc=/tmp/.mod_auth_vascc$$
  old_KRB5CCNAME="${KRB5CCNAME}"
  if KRB5CCNAME=FILE:$tmpcc recordcmd $VASTOOL -u "HTTP/" kinit 2>/dev/null;
  then
    echo "yes"
  else
    echo "no"
    echo ""
    echo "The HTTP/ service keytab could not be used to authenticate"
    echo "to Active Directory. This may mean that the service account"
    echo "has expired, that the keytab has become corrupt, or that"
    echo "the password has been changed without updating the keytab."
    echo ""
    echo "The error message was:"
    KRB5CCNAME=FILE:$tmpcc $VASTOOL -u "HTTP/" kinit 2>&1 | sed -e 's/^/  /'
    echo ""
  fi
  KRB5CCNAME="${old_KRB5CCNAME}"
  rm -f $tmpcc
fi

# Bug 213: HTTP/ keytab will expire by default
if test -f "$KEYTAB"; then
    kinit
    label Testing whether service password expires
    uac=`$VASTOOL attrs -q HTTP/ userAccountControl`
    noexpire_flag=65536 # "Password never expires" (KB305144)
    if test $(($uac & $noexpire_flag)) -eq 0; then
	echo yes
	echo >&2
	cat <<-. >&2
	Unless the group policy is configured otherwise, the HTTP/ service
	account password will expire at some point, leading to authentication
	failures.
.
	if yesorno "Disable password expiry for the service account? (recommended)"; then
	    recordcmd $VASTOOL setattrs -s HTTP/ userAccountControl $(($uac | $noexpire_flag))
	fi
    else
	echo "no (good)"
    fi
fi

#-- check that auth_vas module is loaded when config is parsed
label "checking mod_auth_vas is loaded"
if test -n "$apxs"; then
    sbindir=`$apxs -q SBINDIR`
    target=`$apxs -q TARGET`
    if recordcmd "$sbindir/$target" ${AP_CF+-f "$AP_CF"} -t -e debug 2>&1 | 
	grep 'loaded module.*auth_vas' >/dev/null
    then
	echo 'yes'

	label "checking loaded mod_auth_vas version"
	module_version=`"$sbindir/$target" ${AP_CF+-f "$AP_CF"} \
	    -t -e debug 2>&1 | 
	    sed -n -e 's/.*mod_auth_vas version \([^,]*\),.*/\1/p'`
	echo "${module_version-not found}"

	if test -z "$module_version"; then
	    cat <<-.

		WARNING: unable to detect the loaded mod_auth_vas's version!

.
	elif test x"$module_version" != x"$PACKAGE_VERSION"; then
	    cat <<-.

		WARNING: A different version of mod_auth_vas is being loaded 
		by Apache as to what is expected by this script. I was
		expecting to see version '$PACKAGE_VERSION'.

.
	fi
    else
	echo 'no'
	cat <<-.
	
	It doesn't appear that the Apache web server is loading the VAS
	authentication module. This could be a problem in the configuration
	file (missing LoadModule or a syntax error), a mis-installation of 
	mod_auth_vas or VAS, or perhaps this script is simply invoking the
	web server in the wrong way.

	The command I used to detect what modules were loaded was:

	   $sbindir/$target ${AP_CF+-f "$AP_CF"} -t -e debug

.
    fi
else
    echo 'unknown (need -a flag)'
fi

echo ""
$logfile_written && echo "(Log written to $LOGFILE)"
echo "Finished."
exit 0
